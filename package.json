{
    "name": "mllggr",
    "displayName": "MLLGGR: MarkLogic exttension for tailing logs across all hosts.",
    "description": "The missing logger from MarkLogic",
    "version": "0.0.5",
    "publisher": "marklogic",
    "engines": {
        "vscode": "^1.50.0",
        "node": "16.x"
    },
    "icon": "images/mllggr-vscode.png",
    "galleryBanner": {
        "color": "#1D252D",
        "theme": "dark"
    },
    "categories": [
        "Log Viewer"
    ],
    "repository": "https://github.com/eurochriskelly/mllggr",
    "license": "(Apache-2.0 AND MIT)",
    "activationEvents": [
        "onCommand:extension.logs.newWindow",
        "onCommand:extension.logs.reload"
    ],
    "main": "./dist/extension",
    "contributes": {
        "commands": [
            {
                "command": "extension.logs.newWindow",
                "title": "MarkLogic: Open log viewer"
            },
            {
                "command": "extension.logs.reload",
                "title": "MarkLogic: Reload logs"
            },
            {
                "command": "extension.logs.update",
                "title": "MarkLogic: Update logs"
            },
            {
                "command": "extension.logs.startTail",
                "title": "MarkLogic: Start tailing logs"
            },
            {
                "command": "extension.logs.stopTail",
                "title": "MarkLogic: Stop tailing logs"
            }
        ],
        "configuration": {
            "type": "object",
            "title": "MarkLogic connection configuration",
            "properties": {
                "marklogic.host": {
                    "type": "string",
                    "default": "localhost",
                    "description": "hostname for MarkLogic instance"
                },
                "marklogic.port": {
                    "type": "integer",
                    "default": 8000,
                    "description": "port on which to reach the MarkLogic server"
                },
                "marklogic.username": {
                    "type": "string",
                    "default": "admin",
                    "description": "username for MarkLogic connection"
                },
                "marklogic.password": {
                    "type": "string",
                    "default": "admin",
                    "description": "password for MarkLogic connection"
                },
                "marklogic.documentsDb": {
                    "type": "string",
                    "default": "",
                    "description": "database against which to evaluate queries; required"
                },
                "marklogic.modulesDb": {
                    "type": "string",
                    "default": "",
                    "description": "modules database used in queries; default modules database for app server will be used if left unspecified"
                },
                "marklogic.modulesRoot": {
                    "type": "string",
                    "default": "/",
                    "description": "modules root if using filesystem"
                },
                "marklogic.authType": {
                    "type": "string",
                    "default": "DIGEST",
                    "description": "only DIGEST or BASIC for now"
                },
                "marklogic.ssl": {
                    "type": "boolean",
                    "default": false,
                    "description": "whether to use ssl for the http connection"
                },
                "marklogic.pathToCa": {
                    "type": "string",
                    "default": "",
                    "description": "path to certificate authority (e.g. for self-signed certificates)"
                },
                "marklogic.rejectUnauthorized": {
                    "type": "boolean",
                    "default": true,
                    "description": "whether the server's SSL certificate should be verified against the list of supplied CAs"
                },
                "marklogic.sparqlContentType": {
                    "type": "string",
                    "enum": [
                        "application/json",
                        "application/xml",
                        "text/html",
                        "text/csv"
                    ],
                    "default": "application/json",
                    "markdownDescription": "How to format SPARQL query results",
                    "enumDescriptions": [
                        "",
                        "",
                        "",
                        "note: CSV-formatted results will not work with `describe` queries"
                    ]
                },
                "marklogic.sql.results": {
                    "type": "string",
                    "markdownDescription": "How to present SQL results from 'Eval SQL'",
                    "enum": [
                        "array",
                        "format",
                        "map"
                    ],
                    "markdownEnumDescriptions": [
                        "Return SQL results as a sequence of array values (`json:array`).",
                        "Return SQL results as formatted strings.",
                        "Return SQL result as a sequence of map values, where the key is the column name."
                    ],
                    "default": "array"
                },
                "marklogic.sql.optimize": {
                    "type": "number",
                    "enum": [
                        0,
                        1,
                        2
                    ],
                    "default": 1,
                    "description": "Optimization Levels of 0 (off), 1, and 2 are recognized."
                }
            }
        },
        "menus": {
            "editor/title": [
                {
                    "command": "extension.logs.reload",
                    "group": "navigation",
                    "when": "resourceScheme == mllogviewer"
                },
                {
                    "command": "extension.logs.update",
                    "group": "navigation",
                    "when": "resourceScheme == mllogviewer"
                },
                {
                    "command": "extension.logs.startTail",
                    "group": "navigation",
                    "when": "resourceScheme == mllogviewer && resource not in marklogic.tailingDocs"
                },
                {
                    "command": "extension.logs.stopTail",
                    "group": "navigation",
                    "when": "resourceScheme == mllogviewer && resource in marklogic.tailingDocs"
                }
            ],
            "commandPalette": [
                {
                    "command": "extension.logs.reload",
                    "when": "resourceScheme == mllogviewer"
                },
                {
                    "command": "extension.logs.update",
                    "when": "resourceScheme == mllogviewer"
                },
                {
                    "command": "extension.logs.startTail",
                    "when": "resourceScheme == mllogviewer && resource not in marklogic.tailingDocs"
                },
                {
                    "command": "extension.logs.stopTail",
                    "when": "resourceScheme == mllogviewer && resource in marklogic.tailingDocs"
                }
            ]
        }
    },
    "scripts": {
        "vscode:prepublish": "./node_modules/.bin/webpack --mode production && ./node_modules/.bin/webpack --mode production",
        "compile": "./node_modules/webpack/bin/webpack.js --mode none && ./node_modules/webpack/bin/webpack.js --mode none",
        "build": "npm run compile && vsce package",
        "pretest": "rm -rf dist && tsc -p tsconfig.json && ./node_modules/webpack/bin/webpack.js --mode development --config webpack.test.js",
        "test": "node client/out/test/runTest.js --full-trace",
        "watch": "./node_modules/webpack/bin/webpack.js --mode none --watch & ./node_modules/webpack/bin/webpack.js --mode none --watch"
    },
    "devDependencies": {
        "@types/esprima": "^4.0.2",
        "@types/estree": "0.0.45",
        "@types/mocha": "^8.0.3",
        "@types/node": "^14.14.5",
        "@types/vscode": "^1.50.0",
        "@types/webpack": "^4.41.23",
        "@types/xml2js": "^0.4.5",
        "@typescript-eslint/eslint-plugin": "^4.6.0",
        "@typescript-eslint/parser": "^4.6.0",
        "await-notify": "^1.0.1",
        "eslint": "^7.12.1",
        "esprima": "^4.0.1",
        "https-proxy-agent": "^5.0.0",
        "js-yaml": "^3.14.0",
        "marklogic": "^2.5.0",
        "merge-options": "^3.0.3",
        "mocha": "^8.2.0",
        "request": "^2.88.2",
        "request-promise": "^4.2.6",
        "ts-loader": "^8.0.7",
        "typescript": "^4.0.5",
        "vscode-debugadapter": "^1.42.1",
        "vscode-debugadapter-testsupport": "^1.42.0",
        "vscode-test": "^1.4.0",
        "webpack": "^5.3.0",
        "webpack-cli": "^4.1.0",
        "xml2js": "^0.4.23",
        "yargs-parser": "^20.2.3",
        "conditional-reduce": "^1.2.0",
        "date-fns": "^2.29.3"
    },
    "dependencies": {
        "endent": "^2.1.0",
        "vscode-debugprotocol": "^1.42.0",
        "vscode-languageclient": "^6.1.3"
    }
}
